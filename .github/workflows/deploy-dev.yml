name: Deploy Dev Bot to Hetzner (no-lockfile friendly)

on:
  push:
    branches: [ dev ]
  workflow_dispatch: {}

jobs:
  detect-deps-change:
    runs-on: ubuntu-latest
    outputs:
      deps_changed: ${{ steps.filter.outputs.deps_changed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for dependency file changes
        id: filter
        run: |
          if git rev-parse HEAD^ >/dev/null 2>&1; then
            CHANGED="$(git diff --name-only HEAD^ HEAD || true)"
          else
            CHANGED="package.json"
          fi
          echo "$CHANGED"
          if echo "$CHANGED" | grep -qE '(^|/)(package\.json|package-lock\.json)$'; then
            echo "deps_changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "deps_changed=false" >> "$GITHUB_OUTPUT"
          fi

  quick-deploy:
    needs: detect-deps-change
    if: needs.detect-deps-change.outputs.deps_changed == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Deploy over SSH (no install)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script_stop: true
          script: |
            set -e
            cd /home/botuser/bots/dev
            git fetch --all --prune
            git checkout dev || git checkout -b dev
            git reset --hard origin/dev
            pm2 reload bot-dev || pm2 start /home/botuser/ecosystem.config.js --only bot-dev --update-env
            pm2 save
            pm2 list

  build-and-ship:
    needs: detect-deps-change
    if: needs.detect-deps-change.outputs.deps_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node (no cache; lockfile not committed)
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deps on runner
        run: |
          if [ -f package-lock.json ]; then
            npm ci --omit=dev
          else
            npm i --omit=dev
          fi
          # If you build assets, do it here:
          # npm run build

      - name: Create deploy bundle (includes node_modules)
        run: |
          mkdir -p deploy
          rsync -a --delete \
            --exclude ".git" \
            --exclude ".github" \
            --exclude "deploy" \
            ./ ./deploy/app/
          tar -C deploy -czf dev_bundle.tgz app

      - name: Upload bundle to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: dev_bundle.tgz
          target: /home/botuser/releases/

      - name: Unpack & activate on server (no server-side install)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script_stop: true
          script: |
            set -e
            APP_DIR="/home/botuser/bots/dev"
            RELEASE_DIR="/home/botuser/releases"
            BUNDLE="$RELEASE_DIR/dev_bundle.tgz"

            mkdir -p "$APP_DIR" "$RELEASE_DIR"
            TMPDIR="$RELEASE_DIR/tmp-$$"
            mkdir -p "$TMPDIR"
            tar -C "$TMPDIR" -xzf "$BUNDLE"

            # Keep .env and .data on the server; replace the rest atomically
            rsync -a --delete \
              --exclude ".env" \
              --exclude ".data" \
              "$TMPDIR/app/" "$APP_DIR/"

            rm -rf "$TMPDIR" "$BUNDLE"

            pm2 reload bot-dev || pm2 start /home/botuser/ecosystem.config.js --only bot-dev --update-env
            pm2 save
            pm2 list
